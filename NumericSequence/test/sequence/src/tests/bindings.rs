/* automatically generated by rust-bindgen 0.59.1 */

pub type uint = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NatSequence {
    pub m_sequence: *mut ::std::os::raw::c_void,
    pub count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_NatSequence() {
    assert_eq!(
        ::std::mem::size_of::<NatSequence>(),
        16usize,
        concat!("Size of: ", stringify!(NatSequence))
    );
    assert_eq!(
        ::std::mem::align_of::<NatSequence>(),
        8usize,
        concat!("Alignment of ", stringify!(NatSequence))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NatSequence>())).m_sequence as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NatSequence),
            "::",
            stringify!(m_sequence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NatSequence>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NatSequence),
            "::",
            stringify!(count)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN11NatSequence4NextEv"]
    pub fn NatSequence_Next(this: *mut NatSequence) -> uint;
}
extern "C" {
    #[link_name = "\u{1}_ZN11NatSequenceC1Ej"]
    pub fn NatSequence_NatSequence(this: *mut NatSequence, arg1: uint);
}
impl NatSequence {
    #[inline]
    pub unsafe fn Next(&mut self) -> uint {
        NatSequence_Next(self)
    }
    #[inline]
    pub unsafe fn new(arg1: uint) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        NatSequence_NatSequence(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
